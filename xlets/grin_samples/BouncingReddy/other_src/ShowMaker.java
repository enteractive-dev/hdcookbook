
/**
 * This stand-alone program is used to create the show file for the
 * BouncingReddy sample.  To use it, just do:
 * <pre>
 *    javac ShowMaker.java
 *    java ShowMaker > ../src/reddy_show.txt
 *    rm ShowMaker.class
 * </pre>
 **/


public class ShowMaker {

    public static final int REST_FRAMES = 12;  
        // Rest at begin and end, total rest is double this
    public static final int MOVE_FRAMES = 48;
        // Number of frames for the movement up
    public static final int MOVE_BACK_FRAMES = 12;
        // Number of frames for the movement back down
    public static final int TEXT_X = 100;
    public static final int TEXT_Y = 900;
    public static final int DELTA_Y = 600;
    public static final int MAX_ERROR = 0;
    public static final String[] EQUATIONS = {
        "ease-in-out-bounce",
        "ease-out-bounce",
        "ease-in-bounce",
        "ease-in-out-back overshoot 3.5",
        "ease-in-out-back",
        "ease-out-back",
        "ease-in-back",
        "ease-in-out-elastic amplitude 100 period 5",
        "ease-in-out-elastic",
        "ease-out-elastic",
        "ease-in-elastic",
        "ease-in-out-circ",
        "ease-out-circ",
        "ease-in-circ",
        "ease-in-out-expo",
        "ease-out-expo",
        "ease-in-expo",
        "ease-in-out-sine",
        "ease-out-sine",
        "ease-in-sine",
        "ease-in-out-quint",
        "ease-out-quint",
        "ease-in-quint",
        "ease-in-out-quart",
        "ease-out-quart",
        "ease-in-quart",
        "ease-in-out-cubic",
        "ease-out-cubic",
        "ease-in-cubic",
        "ease-in-out-quad",
        "ease-out-quad",
        "ease-in-quad",
        "linear-relative"
    };


    public static String[] preamble = {
"#",
"#  This file was generated by ../other_src/ShowMaker.java",
"#",
"#  The fun cannot be halted.",
"",
"show",
"",
"setting draw_targets { T:Label T:Reddy } ;",
"",
"exports",
"    segments {",
"        S:Initialize",
"    } features {",
"    } handlers {",
"    }",
";",
"",
"java_generated_class ReddyCommands [[",
"",
"    public class ReddyCommands extends com.hdcookbook.grin.GrinXHelper {",
"",
"        public ReddyCommands(com.hdcookbook.grin.Show show) {",
"            super(show);",
"        }",
"",
"        JAVA_COMMAND_BODY",
"    }",
"]]",
"",
"",
"#",
"# The features used for \"intro\":",
"#",
"",
"feature fixed_image F:Reddy.Scaled ( middle 960 middle 540 ) ReddyKillowatt.jpg ",
"       scaling_model F:Reddy.Scaler ;",
"",
"feature scaling_model F:Reddy.Scaler {",
"       0       960 540            5       5    start                           mills",
"       48      960 540         2000    2000    ease-out-elastic amplitude 8    mills",
"       60      965 540         2000    2000    linear                          mills",
"} ;",
"",
"feature fade F:Reddy.Fade F:Reddy.Scaled {",
"       0       0       start",
"       1       255     linear",
"       54      255     linear",
"       60      0       ease-in-out-quad",
"    }  end_commands {",
"       segment_done ;",
"    }",
";",
"",
"feature group F:Intro {",
"       F:Reddy.Fade",
"       F:Reddy.Scaler",
"} ;",
"",
"#",
"# The features used for \"running\":",
"#",
"",
"feature fixed_image F:Reddy.Image ( middle 1200 middle 840 ) ReddyKillowatt.jpg ;",
"",
"feature translator F:Reddy F:Reddy.Coords {",
"    F:Reddy.Image",
"    F:Reddy.Coords",
"} ;",
""
    };  // end preamble

    public static String[] postamble = {  
        // Postamble probably isn't a real word, but whatever
"",
"",
"feature group F:Running {",
"    sub_feature set_target F:Reddy T:Reddy ;",
"    sub_feature set_target F:LabelAssembly T:Label ;",
"} ;",
"",
"feature group F:Everything {",
"    F:Intro",
"    F:Running",
"} ;",
"",
"segment S:Initialize",
"    setup {",
"        F:Everything",
"    } next {",
"        activate_segment S:Intro ;",
"    }",
";",
"",
"segment S:Intro ",
"    active {",
"       F:Intro",
"    } setup {",
"       F:Everything",
"    } next {",
"       activate_segment S:Running ;",
"    }",
";",
"",
"segment S:Running",
"    active {",
"        F:Running",
"    } setup {",
"       F:Everything",
"    } next {",
"        activate_segment S:Intro ;",
"    }",
";",
"",
"end_show"
    };          // end postamble


    public static void main(String[] args) {
        String maxError = "";
        maxError = " max-error " + MAX_ERROR;
        for (String line : preamble) {
            System.out.println(line);
        }
        
        //
        // First, Reddi's translator model
        //
        System.out.println("feature translator_model F:Reddy.Coords {");
        System.out.println("    0     0     0     start");
        int frame = -1;
        for (int i = 0; i < EQUATIONS.length; i++) {
            frame += REST_FRAMES;
            System.out.println("    " + frame + "    0     0         linear-relative");
            frame += MOVE_FRAMES;
            System.out.println("    " + frame + "    0  -600     " + EQUATIONS[i] + maxError);
            frame += REST_FRAMES;
            System.out.println("    " + frame + "    0  -600         linear-relative");
            frame += MOVE_BACK_FRAMES;
            System.out.println("    " + frame + "    0     0         ease-in-out-cubic" + maxError);
            frame += REST_FRAMES;
            System.out.println("    " + frame + "    0     0         linear-relative");
        }
        System.out.println("} repeat 0 ;");
        System.out.println("");
        //
        // Next, we do the label that shows which equation we're using
        //
        for (int i = 0; i < EQUATIONS.length; i++) {
            System.out.println("feature fade F:Label." + i);
            System.out.println("        sub_feature text left " + TEXT_X + " baseline " + TEXT_Y + " \"" + EQUATIONS[i] + "\"");
            System.out.println("            SansSerif plain 48 { { 255 180 100 255 } } ;");
            int f = 0;
            System.out.println("    { " + f + "   0 linear");
            f += REST_FRAMES - 1;
            System.out.println("      " + f + " 255 linear");
            f += MOVE_FRAMES + REST_FRAMES;
            System.out.println("      " + f + " 255 linear");
            f += REST_FRAMES;
            System.out.println("      " + f + "   0 linear");
            f += MOVE_BACK_FRAMES;
            System.out.print("      " + f + "   0 linear }  ");
            if (i+1 < EQUATIONS.length) {
                System.out.println("end_commands { activate_part F:LabelAssembly label-" + (i+1) + " ; } ; ");
            } else {
                System.out.println("end_commands { activate_part F:LabelAssembly label-0 ; segment_done ; } ; ");
            }
            System.out.println();
        }

        System.out.println("feature assembly F:LabelAssembly {");
        for (int i = 0; i < EQUATIONS.length; i++) {
            System.out.println("    label-" + i + "\t\tF:Label." + i);
        }

        //
        // Now, Reddi's mover
        //

        System.out.println("} ;");
        System.out.println();
        for (String line : postamble) {
            System.out.println(line);
        }
    }
}
